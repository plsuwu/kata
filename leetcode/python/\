#!/usr/bin/env python
# https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/

def min_remove(s: str) -> str:
    print(s)

    chars = [letter for letter in s]
    closed = chars.count("(") - chars.count(")")

    if closed == 0:
        return s

    p_index: dict[str, list[int]] = {
            "(": [],
            ")": []
    }

    for i, c in enumerate(chars):
        if c != "(" and c != ")":
            continue

        if c == "(":
            p_index["("].insert(0, i)
            continue

        else:
            p_index[")"].insert(0, i)
            continue

    print(p_index)

    while closed != 0:
        if (len(p_index["("]) == 0 and closed < 0) or (p_index["("][-1] > p_index[")"][-1] and closed < 0):

            # if paren sequence doesn't start with an opener
            chars.pop(p_index[")"][-1])
            p_index[")"].pop(-1)
            closed += 1

        if closed < 0:
            chars.pop(p_index[")"][0])
            p_index[")"].pop(0)
            closed += 1

        else:
            chars.pop(p_index["("][0])
            p_index["("].pop(0)
            closed -= 1

    print("".join(chars))

    return s


def main():
    cases = {"one": ["lee(t(c)o)de)", "lee(t(c)o)de"], "two": ["a)b(c)d", "ab(c)d"]}

    for k, v in cases.items():
        print(f"\ntest case {k}: input -> {v[0]}, expecting {v[1]}")
        min_remove(v[0])
        # real = min_remove(v[0])
        # print(f"actual func output: {real}")
        print("\n")


if __name__ == "__main__":
    main()
